/*
 * Hugo Simple Theme – Your Custom CSS
 * Deeply integrated with theme variables, supports OS-driven light/dark switch.
 * Place this file in /assets/css/custom.css and load it after the theme CSS.
 */

/* Override the theme’s palette variables for YOUR brand */
:root {
  /* Light theme – these override the theme’s defaults in simple.css */
  --accent: #63927E;           /* Primary accent (used for buttons, links, and highlights) */
  --accent-bg: #EFF5F3;        /* Subtle accent background (pale green-tinged, not pure white) */
  --text: #23382F;             /* Main readable text (very dark green, high contrast) */
  --text-light: #7BAD97;       /* Lighter/deemphasized text & captions (soft green) */
  --border: #D4D4D4;           /* Borders, rules, divider lines (neutral light grey) */
  --bg: #F9FBFA;               /* Page background (pale near-white, subtle green) */
  --disabled: #EFEFEF;         /* Disabled controls (light neutral grey) */
  --code: #D81B60;             /* Inline code or code highlight (strong magenta accent) */
  --preformatted: #444;        /* Code block text color (dark grey for readability) */
  --marked: #FFDD33;           /* Highlight/mark (bright yellow for emphasis) */
}

/* Override theme’s dark mode variables for YOUR palette */
@media (prefers-color-scheme: dark) {
  :root {
    --accent: #6A9E9F;              /* Keep your accent – nice teal stands out */
    --accent-bg: #2b2b2b;           /* Dark accent bg */
    --text: #e0e0e0;                /* Light text for readability */
    --text-light: #999;             /* Muted, less important */
    --border: #444;                 /* Subtle, non-glaring border in dark */
    --bg: #121212;                  /* Full dark for dark UIs */
    --disabled: #111;               /* Barely visible disabled elements */
    --code: #f06292;                /* Bright pink/magenta for code */
    --preformatted: #ccc;           /* Light code block text */
    --marked: #ffe033;              /* Highlight yellow for dark mode */
  }
  /* Slightly dim images in dark for comfort */
  img, video {
    opacity: 0.9;
  }
}

/* Base page – ensures your palette is applied everywhere */
body {
  background-color: var(--bg);
  color: var(--text);
  /* Use system font stack */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
}



/* Links use your accent for clarity */
a, a:visited {
  color: var(--accent);
}
a:hover {
  text-decoration: none;
}

/* Make buttons/nav elements use your accent */
button,
.button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  background-color: var(--accent-bg);
  color: white;
  border-color: var(--accent);
}
button:hover:enabled,
.button:hover:enabled,
input[type="submit"]:enabled:hover,
input[type="reset"]:enabled:hover,
input[type="button"]:enabled:hover {
  background-color: #5A8E8F; /* Slightly darker accent on hover */
  border-color: #5A8E8F;
}

/* Theme’s header – respect your --bg */
body > header {
  background-color: var(--bg);
  border-bottom: 1px solid var(--border);
}

/* Theme’s nav links – clean, readable, hover/current state is obvious */
header nav a,
header nav a:visited {
  color: var(--text);
  border-color: var(--border);
  background-color: var(--accent-bg);
  padding: 6px 12px;
  border: 1px solid transparent;
  text-decoration: none;
  display: inline-block;
  margin: 2px;
}
header nav a:hover,
header nav a.current,
header nav a[aria-current="page"],
header nav a[aria-current="true"] {
  background: var(--bg);
  border: 1px solid var(--accent);
  color: var(--accent);
  cursor: pointer;
}

/* Main content area keeps your bg */
main {
  background-color: var(--bg);
}

/* Code/Pre – subtle, readable, non-glaring in either mode */
code, pre {
  background-color: var(--accent-bg);
  border: 1px solid var(--border);
  color: var(--text);
}
code {
  color: var(--code);
}
pre {
  color: var(--preformatted);
}
div.highlight code, div.highlight pre, div.highlight pre span {
  color: inherit; /* Prevent highlight.js from overriding theme color */
}


/* Consistent width for header and body */
.site-container {
  max-width: 60rem;
  margin: 0 auto;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

.site-container,  /* ensures both header and main use same layout */
.main, 
.content,
.single,
.markdown-body {
  margin-left: 0 !important;
  padding-left: 0 !important;
  box-sizing: border-box;
}

/* Left align the main header elements */
.site-title,
.site-subtitle,
header nav {
  text-align: center;
}

/* Make navigation buttons align horizontally, left anchored */
header nav {
  display: flex;
  gap: 0.7em;           /* spacing between nav items */
  justify-content: center;
  align-items: center;
  padding: 0.5em 0 1em 0;
}

/* Target nav buttons for visual consistency (optional) */
header nav a {
  padding: 6px 12px;
  border-radius: 4px;
}



/* set width of blog post div *
body.blog main {
  max-width: 60rem;     /* Increase default 640px → 900px */
  margin: 0 auto;       /* Keep it centered */
  padding: 1.5rem;      /* Give some breathing room */
}


/* Gallery – flexbox for grids, easy to use in markdown */
.gallery {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1rem;
  margin: 1rem 0;
}
.gallery-image {
  display: block;
  margin: 0.5rem;
}

/* Custom divider – a horizontal rule alternative */
.custom-divider {
  text-align: center;
  margin: 0.5em 0;
  color: var(--border);
  font-size: 1em;
}

/* Figure/Image – center logic, lightbox support */
figure {
  text-align: center;
  margin: 1rem 0;
}
figure img {
  display: block;
  margin: 0 auto;
  border-radius: var(--standard-border-radius);
}
figure a.glightbox {
  display: inline-block;
}

/* Icon – use with inline SVG, aligns nicely */
.icon {
  vertical-align: sub;
  padding-right: 0.25rem;
  display: inline-block;
  width: 1em;
  height: 1.3em;
  margin-right: 0.2rem;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}

/* Custom warning – for editorial notes */
.image-warning {
  color: #b00;
  font-weight: bold;
  font-size: 0.95em;
}

/* Blog post list – theme’s default but with your spacing */
ul.blog-posts {
  padding-left: 0;
}
ul.blog-posts > li {
  list-style-type: none;
  display: flex;
}
ul.blog-posts > li span {
  flex: 0 0 130px;
  color: var(--text-light);
}

/* Flex utility – handy for layout components */
.flex-between {
  display: flex;
  justify-content: space-between;
}

/* TOC nav – remove excess margin */
nav#TableOfContents > ul {
  margin-block-start: 0;
}

/*
  Gallery Grid Layout for Hugo Image Shortcodes

  This grid wrapper enables responsive, equal-width column layout for any Hugo
  shortcode output (e.g., <figure> elements generated by glightbox-figure).
  The below rules are applied to the <div class="gallery-grid"> wrapper.
*/

.gallery-grid {
  /*
    Use CSS Grid for layout: flexible, modern, and easy to control breakpoints.
    No need for media queries in most cases; grid adapts automatically.
  */
  display: grid;

  /*
    Columns will auto-fit to the available space, with a minimum width of 200px
    before wrapping (adjust this value to your needs).
    `1fr` ensures all columns are equal width.
  */
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));

  /*
    Even spacing between grid items (images), regardless of row or column.
    Adjust `gap` to control the "gutter" between images.
  */
  gap: 1rem;

  /*
    Add margin at the top for separation from preceding content.
    Adjust as needed for your site design.
  */
  margin-top: 1rem;
}

.gallery-grid figure {
  /*
    Remove default margins from <figure> elements.
    This prevents unexpected extra space in the grid.
  */
  margin: 0;
}

.gallery-grid img {
  /*
    Force images to fill their grid cell width.
    `height: auto` maintains aspect ratio; never use fixed height here.
  */
  width: 100%;
  height: auto;

  /*
    `display: block` removes unwanted whitespace below images.
    Essential for consistent, tightly packed grids.
  */
  display: block;
}

/*
  Optional: Add media queries here if you want different grid behavior
  on mobile devices. For example, a single column on small screens.

  @media (max-width: 500px) {
    .gallery-grid {
      grid-template-columns: 1fr;
    }
  }
*/

/* Responsive navigation: wraps menu and shrinks padding on small screens */
@media (max-width: 600px) {
  header nav {
    flex-wrap: wrap;
    gap: 0.5em;
    justify-content: center; /* Ensure centering on mobile too */
  }

  header nav a {
    padding: 4px 8px;
    font-size: 0.9em;
  }
}

/* Blog post list: stack date/title vertically on narrow screens */
@media (max-width: 480px) {
  ul.blog-posts > li {
    flex-direction: column;
    margin-bottom: 1rem;
  }

  ul.blog-posts > li span {
    flex: none;
    font-size: 0.9em;
    margin-bottom: 0.25rem;
  }
}

